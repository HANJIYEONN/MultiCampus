----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------
-- 2019/10/23 첫날
/*
    테이블 생성하기
    
    create table 테이블명{
        컬럼명 자료형 option,
        컬럼명 자료형 option,
        컬럼명 자료형 option,
        컬럼명 자료형 option
    };
    
    CHAR(n)      : 고정길이 문자형 데이터 타입
    VARCHAR2(n)  : 가변길이 문자형 데이터 타입
    
        CHAR(10)
            실제사용 2byte -> 10yte (실제 데이터 차지 공간)
        VARCHAR2(10)
            실제사용 2byte -> 2byte (실제 데이터 차지 공간)

    NUMBER(p, s) : 숫자 데이터 타입
            p : 전체자리 유효 숫자
            s : 소숫점 자리의 유효 숫자
            -NUMBER(4, 2)
            
    DATE : 고정길이 날짜
    TIMESTAMP :  밀리초(ms)까지 표현한 데이터 타입
    
    CLOB : 대용량 텍스트 데이터 타입
    BLOB : 대용량 바이너리 데이터를 저장하기 위한 데이터 타입

*/

CREATE TABLE car (
    color VARCHAR2(10),
    mileage NUMBER(5),
    speed NUMBER(3)
);

--테이블 구조 확인
DESC car;

CREATE TABLE student(
    stuid NUMBER(2),
    stuname VARCHAR2(20),
    major VARCHAR2(20),
    score NUMBER(3,2),
    phone VARCHAR2(20)
);

CREATE TABLE deposit(
    cid NUMBER(3),
    cname VARCHAR2(25),
    caddress VARCHAR2(30),
    phone VARCHAR2(20)
);
/*
    필드 추가
        ALTER TABLE 테이블명 ADD ( 컬럼명 자료형 );
    필드 수정
        ALTER TABLE 테이블명 modify ( 컬럼명 자료형 );
    필드 삭제
        ALTER TABLE 테이블명 DROP ( 컬럼명 );
*/

ALTER TABLE deposit 
    add ( amount NUMBER(5));
ALTER TABLE deposit    
    add ( cellphone NUMBER(5));
    
ALTER TABLE deposit
    modify ( cname VARCHAR2(35));
ALTER TABLE deposit
    MODIFY ( cellphone VARCHAR2(10));

ALTER TABLE deposit DROP (cellphone);

DESC deposit;

CREATE TABLE emp(
    empno NUMBER(4),
    ename VARCHAR2(10),
    job VARCHAR2(10),
    mgr NUMBER(4),
    hiredate DATE,
    sal NUMBER(7, 2),
    comm NUMBER(7, 2),
    deptno NUMBER(2)
);

DESC emp;

/*
    INSERT문
        - 테이블 안에 데이터 (레코드)를 삽입하기
            - 지정한 컬럼에 데이터 삽입
                INSERT INTO 테이블명 (컬럼1, 컬럼2, ...) VALUES (값1, 값2, ...);  
            - 모든 컬럼에 데이터 삽입
        I       INSERT INTO 테이블명 VALUES (값1, 값2, ...); 
*/

    INSERT INTO emp (empno, ename) VALUES ( 1, 'hong' );

    --테이블의 레코드 삭제
    DELETE FROM emp;
    
INSERT INTO EMP VALUES(7369,'SMITH','CLERK',7902,TO_DATE('17-12-1980','DD-MM-YYYY'),800,NULL,20);
INSERT INTO EMP VALUES(7499,'ALLEN','SALESMAN',7698,TO_DATE('20-02-1981','DD-MM-YYYY'),1600,300,30);
INSERT INTO EMP VALUES(7521,'WARD','SALESMAN',7698,TO_DATE('22-02-1981','DD-MM-YYYY'),1250,500,30);
INSERT INTO EMP VALUES(7566,'JONES','MANAGER',7839,TO_DATE('02-04-1981','DD-MM-YYYY'),2975,NULL,20);
INSERT INTO EMP VALUES(7654,'MARTIN','SALESMAN',7698,TO_DATE('28-09-1981','DD-MM-YYYY'),1250,1400,30);
INSERT INTO EMP VALUES(7698,'BLAKE','MANAGER',7839,TO_DATE('01-05-1981','DD-MM-YYYY'),2850,NULL,30);
INSERT INTO EMP VALUES(7782,'CLARK','MANAGER',7839,TO_DATE('09-06-1981','DD-MM-YYYY'),2450,NULL,10);
INSERT INTO EMP VALUES(7788,'SCOTT','ANALYST',7566,TO_DATE('09-12-1982','DD-MM-YYYY'),3000,NULL,20);
INSERT INTO EMP VALUES(7839,'KING','PRESIDENT',NULL,TO_DATE('17-11-1981','DD-MM-YYYY'),5000,NULL,10);
INSERT INTO EMP VALUES(7844,'TURNER','SALESMAN',7698,TO_DATE('08-09-1981','DD-MM-YYYY'),1500,NULL,30);
INSERT INTO EMP VALUES(7876,'ADAMS','CLERK',7788,TO_DATE('12-01-1983','DD-MM-YYYY'),1100,NULL,20);
INSERT INTO EMP VALUES(7900,'JAMES','CLERK',7698,TO_DATE('03-12-1981','DD-MM-YYYY'),950,NULL,30);
INSERT INTO EMP VALUES(7902,'FORD','ANALYST',7566,TO_DATE('03-12-1981','DD-MM-YYYY'),3000,NULL,20);
INSERT INTO EMP VALUES(7934,'MILLER','CLERK',7782,TO_DATE('23-01-1982','DD-MM-YYYY'),1300,NULL,10);
/*
    SELECT 문
        - 데이터를 조회
    
    -데이터 안의 모든 레코드를 조회하기
        SELECT * FROM 테이블명;
    -데이터 안의 모든 레코드를 조회하기 (특정 컬럼만)
        SELECT (컬럼명1, 컬럼명2) FROM 테이블명;
*/


SELECT * FROM emp;
SELECT ename FROM emp;
SELECT empno,ename FROM emp;

/*
    WHERE 절을 이용한 SELECT문
    SELECT * FROM 테이블명 WHERE {조건}; 
*/
-- 직원중 sal을 1500초과하는 사람들의 정보
SELECT * 
FROM emp
WHERE sal > 1500;

-- 부서번호가 20인 직원
SELECT *
FROM emp
WHERE deptno =20;

-- 이름이 SMITH인 직원
SELECT *
FROM emp
WHERE ename = 'SMITH';

-- 81년 1월 2일 이전 입사자
SELECT * 
FROM emp
WHERE hiredate < '81/01/02';

-- 부서번호가 10이면서 직업이 매니저인 직원
SELECT * FROM emp WHERE deptno = 10 AND job = 'MANAGER';

-- 부서번호가 10이거나 직업이 매니저인 직원
SELECT * FROM emp WHERE deptno = 10 OR job = 'MANAGER';

--부서번호가 10번이 아닌 직원
SELECT * FROM emp WHERE not deptno = 10;
SELECT * FROM emp WHERE deptno != 10;

-- 급여가 100보다 크고 1500보다 작은 직원들
SELECT * FROM emp WHERE sal > 100 AND sal < 1500;
-- 급여가 100보다 작거나 1500이상 직원들
SELECT * FROM emp WHERE sal < 100 OR sal > 1500;

-- 성과급이 300 또는 500 또는 1400 받은 직원
SELECT * FROM emp WHERE comm = 300 OR comm = 500 OR comm = 1400;

/*
    BETWEEN연산자
    특정 컬럼의 데이터 값이 하한값, 상한값 사이에 포함되는 레코드를 조회할 때
*/
-- 급여가 1200~1500인 사람들
SELECT * FROM emp WHERE sal BETWEEN 1200 AND 1500;

-- 급여가 1200~1500이 아닌 사람들
SELECT * FROM emp WHERE sal not BETWEEN 1200 AND 1500;
SELECT * FROM emp WHERE not sal BETWEEN 1200 AND 1500;

-- 82년도 입사자 출력
SELECT * FROM emp WHERE hiredate between '1982/01/01' AND '1982/12/31';

/*
    IN연산자 
            특정 컬럼의 데이터 값이 값1, 값2, ....하나라도 일치하면 참
*/
SELECT * FROM emp WHERE comm IN (300,500,1400);
SELECT * FROM emp WHERE not comm IN (300,500,1400); -- NULL은 연산자가 아님, 즉 연산 불가

-- NULL인지 아닌지 비교하는 연산
SELECT * FROM emp WHERE comm IS NULL;
SELECT * FROM emp WHERE comm IS NOT NULL;

-- 문자열 비교연산
SELECT * FROM emp WHERE ename like 'WARD';

-- 이름이 s로 시작하는 직원
-- % : 0글자 이상의 문자들
SELECT * FROM emp WHERE ename like 'S%';

-- 직원의 이름 중 두번째 문자가 A인 직원
-- _ : gkskdml rmfwk
SELECT * FROM emp WHERE ename like '_A%';

-- 이름중 A를 포함하는 직원
SELECT * FROM emp WHERE ename like '%A%';

-- 이름중 A를 포함하지 않는 직원
SELECT * FROM emp WHERE ename not like '%A%';

-- 산술연산
SELECT ename, sal, sal * 12
FROM emp;

SELECT ename, sal, sal  * 12 + comm FROM emp;

-- comm이 NULL 값이면 0으로 null 값이 아니면 그대로 유지해야함
-- nvl : null 을 포함하는 컬럼을 특정한 값으로 전환하는 함수
-- nvl ( A, B ) : A값이 null이면 B, 아니면 A; 
SELECT ename, sal, nvl(comm, 0) FROM emp;

SELECT ename, sal, sal * 12 + nvl(comm, 0) FROM emp;

SELECT ename as 이름,  sal, sal * 12 + nvl(comm, 0) as "1년치 급여"  FROM emp;

-- 정렬
-- 급여를 기준으로 정렬
SELECT * FROM emp ORDER BY sal;
SELECT * FROM emp ORDER BY ename;

-- 함수

-- 문자 함수
-- 대소문자 변환 함수
    -- lower : 소문자로
    -- Upper : 대문자로
SELECT ename, LOWER(ename), UPPER(ename) FROM emp;

-- 현재 날짜 구하기 : sysdate
SELECT sysdate FROM dual; --dual : 데이터를 표현하기 위한 임시테이블

-- 문자열의 길이 구하기
SELECT LENGTH('안녕하세요'), LENGTH('hello') FROM dual;

-- 문자열 합치는 함수
SELECT CONCAT('안녕', '하세요') FROM dual;

-- 문자열을 추출하는 함수
SELECT SUBSTR('안녕하세요반갑습니다', 2, 3)  FROM dual;
SELECT SUBSTR('안녕하세요반갑습니다', -2, 3)  FROM dual; -- -는 뒤에서부터 시작합니다
SELECT SUBSTR('안녕하세요반갑습니다', 3),SUBSTR('안녕하세요반갑습니다', -3) FROM dual;
/*
이름이 N으로 끝나는 사람 
SUBSTR함수를 이용해서
*/
SELECT * FROM emp WHERE SUBSTR(ename, -1) IN 'N';

/*
     그룹 함수
        
        테이블의 전체 데이터 (혹은 특정조건에 만족하는 데이터 집합)에서 통계적인 결과를 구하는 함수
        하나 이상의 행을 그룹으로 묶어서 연선하며 하나의 결과를 구함
*/

SELECT sal FROM emp;
SELECT SUM(sal) as "급여 총합"
        ,AVG(sal) as "평균"
        ,MAX(sal) as "최고 급여"
        ,MIN(sal) as "최소 급여"
        FROM emp;

-- COUNT() : 행(레코드)의 갯수를 세는 함수
-- COUNT(*) :  전체 행의 갯수

SELECT COUNT(*) FROM emp;
SELECT COUNT(comm) FROM emp; --NULL값은 결과에 포함되지 않음

SELECT DISTINCT(job) FROM emp; --DISTINCT : 중복 제거
/*
    서브 커리
    
    다른 질의문에 중첩되어 사용된 검색문
    하나의 SELECT 문장의 절 안에 포함된 또 하나의 SELECT 문장
*/
-- 최고 급여
SELECT MAX (sal) FROM emp; --결과 : 5000
-- 5000 받는 직원의 이름
SELECT ename FROM emp WHERE sal = 5000;

-- 서브 커리 적용
-- 서브커리는 비교연산자 오른쪽에 기술해야하고 괄호로 감싸야함
SELECT ename 
FROM emp 
WHERE sal = (SELECT MAX(sal) 
                FROM emp);

-- SCOTT 과 같은 부서에 근무하는 사원의 이름과 부서번호 출력
SELECT ename, deptno FROM emp WHERE deptno = (SELECT deptno FROM emp WHERE ename = 'SCOTT');

-- SCOTT 과 동일한 직급을 가진 사원을 출력
SELECT * FROM emp WHERE job = (SELECT job FROM emp WHERE ename = 'SCOTT');

-- SCOTT 과 급여가 동일하거나 더 많이 받는 직원의 이름과 급여
SELECT ename, sal FROM emp WHERE sal >= (SELECT sal FROM emp WHERE ename = 'SCOTT');
/*
    데이터 그룹 사용하기
    GROUP BY : 특정 컬럼을 기준으로 그룹을 나눔    
*/

-- 부서별 평균 급여
SELECT Deptno, AVG(sal) 
FROM emp
GROUP BY deptno;

-- 부서별 사원수, 커미션을 받은 사원수
SELECT deptno, COUNT(*), COUNT(comm)
FROM emp
WHERE comm is not NULL
GROUP BY deptno;

/*
    having : 그룹결과를 필터링
    부서 내 총 급여가 2500초과하는 부서를 필터링하고 싶다면?
*/
-- 부서별 총 급여
SELECT deptno, SUM(sal)
FROM emp
GROUP BY deptno;

SELECT deptno, SUM(sal)
FROM emp
WHERE sal > 2500
GROUP BY deptno;

-- 아래것을 그룹화한것이 위에것, 필터링되서 수가 적어짐
SELECT sal
FROM emp
WHERE sal > 2500;

/*
    레코드를 그룹화 하기전에 조건에 따라 걸러짐
    급여가 2500초과인 직원의 레코드만 골라서 부서별로 그룹필한후 총 급여 계산
*/

SELECT deptno,SUM (sal) FROM emp GROUP BY deptno HAVING SUM(sal) > 10000;

-- 부서별 평균급여가 2000이상인 부서의 번호와 평균급여 출력
SELECT deptno, AVG(sal)
FROM emp
GROUP BY deptno
HAVING AVG(sal) >= 2000;

/*
    직업이 매니저가 아닌 직원들에 대해서
    직업별로 나눠서 총 급여가 5000이상인 직업, 직업별 사원수, 직업별 급여 총합 구하기 
*/
SELECT job as "직업", COUNT(empno) as "사원수", SUM(sal) as "급여"
FROM emp
WHERE job not like 'MANAGER'
GROUP BY job
HAVING SUM(sal) > = 5000;
--****************************************************************************************************
-- 절대값 
SELECT 100, ABS(100), ABS(-100) from DUAL;

--나머지 
SELECT 123, 10, MOD (123, 10) FROM dual;

--반올림
-- round(수, 반올림 자릿수),
SELECT ROUND(15.931, 1) FROM dual;

-- 문자열 연결 : ||
SELECT 'abc'||'efg' FROM dual;

-- 문자열 치환 
SELECT REPLACE('JACK and JUE', 'J', 'BL') FROM dual;

-- trim : 잘라내기
-- LTRIM : 왼쪽
SELECT LTRIM ('123test123', '123') FROM dual;
-- RTRIM : 오른쪽
SELECT RTRIM ('123test123', '123') FROM dual;
--TRUNK : 잘라내기
SELECT TRUNC(156.79,1) FROM dual;
SELECT TRUNC(156.79,-1) FROM dual;

CREATE TABLE customer (
name VARCHAR2(20),
ssn VARCHAR2(20),
car_yn CHAR (1)
);

DESC customer;

INSERT INTO customer VALUES ('홍길동', '910111-1234567', 'Y');
INSERT INTO customer VALUES ('홍길자', '810111-2234567', 'N');

SELECT * FROM customer;

SELECT substr(ssn, 8, 1) FROM customer;
SELECT decode (substr(ssn,8,1),'1', '남자', '2', '여자') FROM customer;
/*
decode : 값을 비교하여 해당하는 값을 돌려주는 함수
단, 비교시에는 정확히 같은 값만 비교 가능
*/
----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------

--2019/10/24 아침
SELECT ename,sal, (sal * 12 + 100)
FROM emp;

SELECT ename,sal, (sal * 12 + 100)
FROM emp
ORDER BY (sal * 12 + 100);

SELECT ename, sal
FROM emp
WHERE sal > 2000
ORDER BY sal DESC;

SELECT ename, deptno
FROM emp
WHERE empno ='7788';

SELECT ename, sal
FROM emp
WHERE  sal not BETWEEN 2000 AND 3000;

SELECT ename, job, hiredate
FROM emp
WHERE hiredate BETWEEN '1981/02/20' AND '1981/05/01';

SELECT ename, job, hiredate
FROM emp
WHERE deptno BETWEEN 20 AND 30
ORDER BY ename desc;


/*
    조인 JOIN
        두 개 이상의 릴레이션 (테이블)들의 공통적인 특성을 중시으로 합쳐
        하나의 릴레이션(테이블)로 표현
        두 개 이상의 릴레이션으로부터 정보를 조합하기 위해 사용하는 가장 일반적인 방법
    
    JOIN의 필요성
        특정 부서에 대한 부서 이름, 부서 위치등의 정보를 dept테이블에 있음
        특정 사원에 대한 부서 이름, 부서 위치등의 정보를 알고 싶다면 dept테이블에서 정보를 알아와야 함
*/

CREATE TABLE dept(
    deptno NUMBER(2),
    dname VARCHAR2(20),
    dloc VARCHAR2(20)
);

DESC dept;

INSERT INTO dept VALUES (10, 'ACCOUNTING', 'NEW YORK');
INSERT INTO dept VALUES (20, 'RESEARCH', 'DALLAS');
INSERT INTO dept VALUES (30, 'SALES', 'CHICAGO');

SELECT * FROM dept;

-- CROSS JOIN 
-- 특별한 키워드 없이 (,)로 연결

SELECT * FROM emp, dept;
-- >사원테이블 데이터 * 부서테이블 데이터 : 모든 경우의 수

SELECT * FROM emp e, dept d;  --> 테이블에 별칭 지어주기

/*
    동등 조인
    가장 많이 사용하는 조인방법
    조인 대상이 되는 두 테이블에서 공통적으로 존재하는 칼럼의 값이
    일치되는 행을 연결하여 결과를 생성하는 조인 방법
*/

SELECT * FROM emp, dept WHERE emp.deptno = dept.deptno;
SELECT * FROM emp e, dept d WHERE e.deptno = d.deptno; -- 별칭을 이용하여 JOIN하기!

-- SCOTT의 이름과 부서명을 출력하세요
SELECT ename, dname FROM emp, dept WHERE emp.deptno = dept.deptno AND ename = 'SCOTT';

--뉴욕에서 근무하는 사원의 이름과 급여 출력
SELECT ename, sal
FROM emp e, dept d
WHERE e.deptno = d.deptno AND DLOC = 'NEW YORK';

--ACCOUNTING 부서 소속사원의 이름과 입사일
SELECT ename, hiredate
FROM emp e, dept d
WHERE e.deptno = d.deptno AND dname = 'ACCOUNTING';

-- 사원테이블과 부서테이블을 조인해서 사원의 이름과 부서번호와 부서명을 출력
SELECT ename, e.deptno, ename
FROM emp e, dept d
WHERE e.deptno = d.deptno;

/*
    비동등 조인
        조인 조건이 특정 범위 내에 있느느지 조사하기 위해 WHERE절에 조건을 = 연산자 이외의
        비교 연산자를 사용하는 조인
*/
CREATE TABLE salgrade (
    grade NUMBER(2),
    losal NUMBER(5),
    hisal NUMBER(5)
);

INSERT INTO salgrade VALUES (1, 700, 1200);
INSERT INTO salgrade VALUES (2, 1201, 1400);
INSERT INTO salgrade VALUES (3, 1401, 2000);
INSERT INTO salgrade VALUES (4, 2001, 3000);
INSERT INTO salgrade VALUES (5, 3001, 9000);

SELECT * FROM salgrade;
SELECT ename, sal FROM emp;
-- 급여가 800이면 두 사이 값으로 취급되니 1등급임

SELECT ename, sal, grade
FROM emp, salgrade
WHERE sal BETWEEN losal AND hisal; -- =이외의 연산자, 비동등 연산자
/*
    SELF JOIN
    자기 자신과 자기 자신을 합치는 조인
*/
-- SMITH의 매니저 이름은??
SELECT mgr FROM emp WHERE ename = 'SMITH';  -- 스미스 매니저의 사원번호 : 7902
SELECT ename FROM emp WHERE empno = 7902; -- 사번이 7902인 직원 : FORD

SELECT e1.ename, e2.ename 
FROM emp e1, emp e2
WHERE e1.empno = e2.mgr
AND e2.ename = 'SMITH';

-- 매니저가 KING인 사람들의 이름과 직무를 출력하세요
SELECT e1.ename, e1.job
FROM emp e1, emp e2
WHERE e1.mgr = e2.empno
AND e2.ename = 'KING';

-- SCOTT과 동일한 근무지에서 근무하는 사원의 이름
SELECT e2.ename, e1.ename
FROM emp e1, emp e2
WHERE e1.deptno = e2.deptno
AND e1.ename = 'SCOTT'
AND e2.ename != 'SCOTT';

-- 서브쿼리
-- DALLAS에서 근무하는 사원의 이름, 부서번호 출력
SELECT ename, deptno
FROM emp
WHERE deptno = (    SELECT deptno 
                    FROM dept
                    WHERE dloc ='DALLAS'
                );
                
SELECT ename, d.deptno 
FROM emp e, dept d
WHERE e.deptno = d.deptno
AND d.dloc = 'DALLAS';

-- SALES 부서에 근무하는 모든 사원의 이름과 급여
SELECT ename, sal
FROM emp
WHERE deptno = (    SELECT deptno 
                    FROM dept 
                    WHERE dname = 'SALES' );
                    
-- 직속 상관이 KING인 사원의 이름과 급여
SELECT ename, sal 
FROM emp
WHERE mgr = (   SELECT empno 
                FROM emp
                WHERE ename = 'KING');
                
/*
    레코드 갱신 
    UPDATE문 : 기존 레코드의 값을 변경시켜주는 문장
    UPDATE 테이블 명 SET 컬럼명 = 값, 컬럼명2 = 값2;
    UPDATE 테이블 명 SET 컬럼명 = 값, 컬럼명2 = 값2 WHERE 조건;
    
*/                

SELECT *
FROM salgrade;

UPDATE salgrade
SET losal = 500; -- 모든 레코드 설정

UPDATE salgrade
SET losal = 500
WHERE grade = 1;

Select * from salgrade;
SELECT * FROM emp;
SELECT * FROM dept;
/*
    데이터 베이스 모델링
        -현실 세계의 복잡한 개념을 단순화하고 추상화시켜 데이터 베이스화하는 과정

    데이터 베이스 모델링 과정
        1. 요구사항수집 및 분석
            - 실제 문서를 수집하고 분석
            - 비슷한 업무를 처리하는 기족의 데이터 베이스를 분석(벤치마킹)
        
        2. 개념적 모델링
            -요구사항을 수집하고 분석한 결과를 토대로 업무의 핵심적인 개념을 구분하고 
            전체적인 뼈대를 구성하는 과정
            - E-R 다이어그램을 그리는 과정
            
        3. 논리적 모델링
            
        4. 물리적 모델링 
            -컴퓨터의 저장장치에 저장하기 위한 물리적 구조를 정의하고 구현

    ER 다이어그램
    =Entity Relationship
        - 개념적 모델링에서 사용하는 모델
        - 세상의 사물을 개체(Entity)와 개체들간의 관계(Relationship)으로 표현
        
        - 개체
            -> 독립적인 의미를 지니고 있는 유무형의 사람 또는 사물
            -> 속성에 의해 식별
        - 관계
            ->개체들끼리의 관계
        
     ER 다이어그램
        - 개체와 개체간의 관계를 표현한 그림
        - Entity와 속성
            -> Entity는 직사각형
            -> 속성은 타원형으로 표시, Entity에 실선으로 연결
            
*/

/*
    제약 조건 
    
    Primary Key 
        - 해당 컬럼의 값이 null이 될 수 없고, 모든 레코드간의 유일한 값이어야 함.
        
    Foreign Key
        - 다른 테이블의 기본키를 참조하는 컬럼으로 참조하고 있는 테이블의 기본키 칼럼에 존재하는 값만이 이 컬럼에 담김
        
    NOT NULL
        - 해당 컬럼은 NULL이 될 수 없음
        
*/
CREATE TABLE pktest(
    userid NUMBER(4) PRIMARY KEY,
    username VARCHAR2(10)
);
    
DESC pktest;

INSERT INTO pktest VALUES (1, 'hong');
INSERT INTO pktest VALUES (1, 'kim');
INSERT INTO pktest VALUES (null, 'kim');
SELECT * FROM pktest;

-- 제약조건을 적용한 테이블 설계
CREATE TABLE dept2(
    deptno NUMBER PRIMARY KEY,
    dname VARCHAR2(20) NOT NULL,
    dloc VARCHAR2(20) NOT NULL
);

CREATE TABLE emp2(
    empno NUMBER PRIMARY KEY,
    ename VARCHAR2(20) NOT NULL,
    deptno NUMBER NOT NULL,
    FOREIGN KEY (deptno) REFERENCES dept2(deptno)
    );
    
/*
    JDBC
    =Java Data Base Connectivity
        - 자바의 API의 하나로서 데이터 베이스에 연결
        - 데이터 베이스안의 데이터에 대해 검색하고 데이터를 변경할 수 있게 함.
    
    JDBC Driver
        - 데이터 베이스를 자바에서 사용하기 위한 드라이버
    
    JDBC 개발 절차
        - DBMS 설치
        - 자신이 설치한 DBMS에 필요한 JDBC드라이버 설치
        - JDBC가 제공하는 기능을 이용해서 데이터베이스 응용프로그램 작성
        
   
    자바코드를 이용해서 JDBC 프로그래밍하기
    1. DB 연결하고
    2. DBMS 에 명령을 전송
    3. DBMS로부터 질의 결과를 가져오기
*/


DESC student2;

----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------
-- 2019/10/25 셋째날

-- 1 
SELECT count, NUMBER(AVG(sal)), MIN (sal), MAX(sal), SUM(sal)
FROM emp
GROUP BY deptno;
-- 6
SELECT deptno 
FROM emp
GROUP BY deptno
having MIN(sal) >= (SELECT MIN(sal)
                    FROM emp
                    WHERE deptno = '20');
                    
SELECT *
FROM student2;
